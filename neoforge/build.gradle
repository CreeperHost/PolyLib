plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "me.shedaniel.unified-publishing"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "neoforge"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"
    forgeRuntimeLibrary('blue.endless:jankson:1.2.1')
    forgeRuntimeLibrary('io.sentry:sentry:5.7.2')

    implementation('io.sentry:sentry:5.7.2')
    {
        exclude group: 'com.google', module: 'gson'
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
    shadowCommon("io.sentry:sentry:5.7.2") {
        transitive = false
    }

    implementation "blue.endless:jankson:1.2.1"
    shadowCommon "blue.endless:jankson:1.2.1"

//    modCompileOnly "mezz.jei:jei-${rootProject.minecraft_version}-neoforge-api:${rootProject.jei_version}"
//    modRuntimeOnly "mezz.jei:jei-${rootProject.minecraft_version}-neoforge:${rootProject.jei_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    dependencies {
        exclude(dependency('com.google::'))
    }

    relocate 'io.sentry', 'net.creeperhost.polylib.io.sentry'
    relocate 'blue.endless.jankson', 'net.creeperhost.polylib.blue.endless.jankson'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
    atAccessWideners.add('polylib.accesswidener')
    archiveClassifier = "neoforge"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-neoforge"
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (ENV.CREEPERHOST_MAVEN_TOKEN) {
            maven {
                url "https://maven.creeperhost.net/release"
                credentials {
                    username = "githubci"
                    password = "${ENV.CREEPERHOST_MAVEN_TOKEN}"
                }
            }
        }
    }
}

unifiedPublishing {
    project {
        displayName = "$rootProject.curseforge_version.${ENV.GITHUB_RUN_NUMBER} [NeoForge]"
        releaseType = "$rootProject.artifact_type"
        changelog = ""
        gameVersions = []
        gameLoaders = ["neoforge"]
        mainPublication tasks.remapJar
        relations {
            depends {
                curseforge = "architectury-api"
            }
        }

        var CURSE_API_KEY = project.findProperty("CURSE_API_KEY") ?: System.getenv("CURSE_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll rootProject.minecraft_version
            }
        }
    }
}
