plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

def generatedResources = project(":testmod-common").file("src/generated/resources/")

loom {

    accessWidenerPath = project(":testmod-common").loom.accessWidenerPath

    runs {
        data {
            data()
            programArgs "--mod", "testmod"
            programArgs "--all"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", project(":testmod-common").file("src/main/resources").absolutePath

            //Needed in the poly testmod workspace
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath

            //I believe this should work for any mods that dep on polylib, it just does not work with the builtin test mod
//            programArgs "--existing-mod", "polylib"
        }
    }

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "architectury.mixins.json"
//        mixinConfig "polylib-forge.mixins.json"

    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowLib
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon.extendsFrom shadowLib
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    implementation.extendsFrom shadowLib
    forgeRuntimeLibrary.extendsFrom shadowLib
}

repositories {
    flatDir {
        dirs '/libs'
    }
}

dependencies {
    forge "net.minecraftforge:forge:${gradle.rootProject.architectury.minecraft}-${rootProject.forge_version}"
//    modApi "dev.architectury:architectury-forge:${gradle.rootProject.architectury_version}"

    forgeRuntimeLibrary("blue.endless:jankson:1.2.1")

//    implementation project(path: ":forge", configuration: "namedElements")
    modApi project(path: ":forge", configuration: "namedElements")


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    common(project(path: ":testmod-common", configuration: "namedElements")) { transitive false }
}


publishing {

}
