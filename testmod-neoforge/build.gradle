plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

def generatedResources = project(":testmod-common").file("src/generated/resources/")

loom {
    accessWidenerPath = project(":testmod-common").loom.accessWidenerPath

    mods {
        neoForge {
            sourceSet project(":neoforge").sourceSets.main
        }
    }

    runs {
        data {
            data()
            programArgs "--mod", "testmod"
            programArgs "--all"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", project(":testmod-common").file("src/main/resources").absolutePath

            //Needed in the poly testmod workspace
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath

            //I believe this should work for any mods that dep on polylib, it just does not work with the builtin test mod
//            programArgs "--existing-mod", "polylib"
        }
    }
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    flatDir {
        dirs '/libs'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    forgeRuntimeLibrary("blue.endless:jankson:1.2.1")

    implementation project(path: ":neoforge", configuration: "namedElements")
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    common(project(path: ":testmod-common", configuration: "namedElements")) { transitive false }
}


publishing {

}
